{
  "name": "My AI Demo",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! ðŸ‘‹\nMy name is EBCO Chatbot. How can I assist you today?",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -224,
        0
      ],
      "id": "5691d360-8801-45ae-8bbb-40fc83d49e71",
      "name": "When chat message received",
      "webhookId": "b54cc26d-de48-4c01-a61d-ba1354689969"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=## Roles\nYou are Ayu, a data analyst for Ebconnection Indonesia. Your task is assisting user with the data needed for them to be analysed further with you. Be cooperative and give insightful answer for user\n\n## Context\n- Timestamp: `{{ $now }}`"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        96,
        0
      ],
      "id": "5d317fa6-a1b0-4c27-aefb-da50d8825f33",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        0,
        224
      ],
      "id": "eb15fbbe-a0e9-4327-8af8-58f2c04e79b0",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "UaJyzWkKNWOqswN1",
          "name": "Gemini Credentials"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        128,
        224
      ],
      "id": "cd668939-e408-4a94-8123-f7237fe40731",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Execute a SQL query in Database Transaction. Please call \"Database Schema Information\" first before call this function.\n",
        "operation": "executeQuery",
        "query": "{{ $fromAI('query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        272,
        224
      ],
      "id": "98830fae-bbdd-4b56-9bda-b03ede4860bf",
      "name": "Execute SQL Query",
      "credentials": {
        "postgres": {
          "id": "cIu1FpboVgYsrQzA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Execute this to know the Database Schema Information that needed to query to database transaction. Use PostgreSQL query language.",
        "operation": "executeQuery",
        "query": "WITH primary_keys AS (\n    SELECT\n        kcu.table_schema,\n        kcu.table_name,\n        kcu.column_name\n    FROM\n        information_schema.table_constraints AS tc\n    JOIN\n        information_schema.key_column_usage AS kcu\n        ON tc.constraint_name = kcu.constraint_name AND tc.table_schema = kcu.table_schema\n    WHERE\n        tc.constraint_type = 'PRIMARY KEY'\n),\nforeign_keys AS (\n    SELECT\n        kcu.table_schema,\n        kcu.table_name,\n        kcu.column_name,\n        ccu.table_schema AS foreign_schema,\n        ccu.table_name AS foreign_table,\n        ccu.column_name AS foreign_column\n    FROM\n        information_schema.table_constraints AS tc\n    JOIN\n        information_schema.key_column_usage AS kcu\n        ON tc.constraint_name = kcu.constraint_name AND tc.table_schema = kcu.table_schema\n    JOIN\n        information_schema.referential_constraints AS rc\n        ON tc.constraint_name = rc.constraint_name AND tc.constraint_schema = rc.constraint_schema\n    JOIN\n        information_schema.constraint_column_usage AS ccu\n        ON rc.unique_constraint_name = ccu.constraint_name AND rc.unique_constraint_schema = ccu.table_schema\n    WHERE\n        tc.constraint_type = 'FOREIGN KEY'\n),\ncolumn_indexes AS (\n    SELECT\n        schemaname AS table_schema,\n        tablename AS table_name,\n        indexname,\n        c.attname AS column_name\n    FROM\n        pg_indexes i\n    JOIN\n        pg_class ic ON i.indexname = ic.relname\n    JOIN\n        pg_index ix ON ic.oid = ix.indexrelid\n    JOIN\n        pg_attribute c ON c.attrelid = ix.indrelid AND c.attnum = ANY(ix.indkey)\n    WHERE\n        schemaname NOT IN ('pg_catalog', 'information_schema')\n)\nSELECT\n    c.table_name,\n    c.column_name,\n    c.data_type,\n    c.is_nullable,\n    CASE WHEN pk.column_name IS NOT NULL THEN 'YES' ELSE 'NO' END AS is_primary_key,\n    CASE WHEN fk.column_name IS NOT NULL THEN 'YES' ELSE 'NO' END AS is_foreign_key,\n    fk.foreign_table,\n    fk.foreign_column,\n    (SELECT STRING_AGG(DISTINCT ci.indexname, ', ') FROM column_indexes ci\n     WHERE ci.table_schema = c.table_schema\n       AND ci.table_name = c.table_name\n       AND ci.column_name = c.column_name\n    ) AS indexes\nFROM\n    information_schema.columns AS c\nLEFT JOIN\n    primary_keys AS pk\n    ON c.table_schema = pk.table_schema AND c.table_name = pk.table_name AND c.column_name = pk.column_name\nLEFT JOIN\n    foreign_keys AS fk\n    ON c.table_schema = fk.table_schema AND c.table_name = fk.table_name AND c.column_name = fk.column_name\nWHERE\n    c.table_schema NOT IN ('pg_catalog', 'information_schema') \nORDER BY\n    c.table_schema,\n    c.table_name,\n    c.ordinal_position;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        432,
        224
      ],
      "id": "c93b1c4f-2e9f-4218-864a-f12b03fb7929",
      "name": "Database Schema Information",
      "credentials": {
        "postgres": {
          "id": "cIu1FpboVgYsrQzA",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Execute SQL Query": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Database Schema Information": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a2e76aa9-4978-461f-8a45-f34a5f576483",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ebc97434afd5319394b878463dff8aa32be44bd3cc1baabe24fc9c03f831eef8"
  },
  "id": "06K1yxmUG2vCPkYQ",
  "tags": []
}